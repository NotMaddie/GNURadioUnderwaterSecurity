options:
  parameters:
    author: Madeline Tippett
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: first_block
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Own Block Creation
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '11440'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: C:\Users\notma\OneDrive\Desktop\School\KNE401 and 402 Honours\Simulation\Simulation
      Own Code\file_sink_ex.txt
    type: byte
    unbuffered: 'True'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 84.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'True'
    comment: ''
    file: C:\Users\notma\OneDrive\Desktop\School\KNE401 and 402 Honours\Simulation\Simulation
      Own Code\decrypt_msg.txt
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 508.0]
    rotation: 0
    state: true
- name: blocks_file_sink_1
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: C:\Users\notma\OneDrive\Desktop\School\KNE401 and 402 Honours\Simulation\Simulation
      Own Code\keys.txt
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 212.0]
    rotation: 0
    state: true
- name: blocks_file_sink_2
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: C:\Users\notma\OneDrive\Desktop\School\KNE401 and 402 Honours\Simulation\Simulation
      Own Code\nonce.txt
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 324.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 160.0]
    rotation: 0
    state: true
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 272.0]
    rotation: 0
    state: true
- name: blocks_throttle_0_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 384.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport pmt\nimport os\nimport pickle\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import AESGCM\n\ntextboxValue = \"\"\nkey = \"\"\nnonce = \"\"\n\nclass my_sync_block(gr.sync_block):\n\
      \    \"\"\"\n    reads input from a message port\n    outputs encrypted data\
      \ using AES-GCM \n    \"\"\"\n    def __init__(self):\n        gr.sync_block.__init__(self,\n\
      \            name = \"AES-GCM Encryption\",\n            in_sig = None,\n  \
      \          out_sig = [np.byte, np.byte, np.byte])\n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.message_port_register_out(pmt.intern('clear_input'))\n       \
      \ self.set_msg_handler(pmt.intern('msg_in'), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        global textboxValue\n        global key\n        global nonce\n\
      \        \n        message = pmt.symbol_to_string (msg)\n        data = bytes(message,\
      \ 'ascii')\n        \n        key = AESGCM.generate_key(bit_length=128)\n  \
      \      aesgcm = AESGCM(key)\n        nonce = os.urandom(12)\n        encryptText\
      \ = aesgcm.encrypt(nonce, data, None)\n        textboxValue = encryptText\n\
      \        \n        print(\"---Start of Encrypt---\")\n        \n        print(\"\
      TextboxValue: \")\n        print(textboxValue)\n        print(\"Key: \")\n \
      \       print(key)\n        print(\"Nonce: \")\n        print(nonce)\n     \
      \           \n        #convert to string\n        #textboxValue = textboxValue.hex()\
      \   #changed from .str()\n        #key = key.hex()\n        #nonce = nonce.hex()\n\
      \        textboxValue = str(textboxValue)\n        key = str(key)\n        nonce\
      \ = str(nonce)\n        \n        \n        print(\"TextboxValue (Hex): \")\n\
      \        print(textboxValue)\n        print(\"Key (Hex): \")\n        print(key)\n\
      \        print(\"Nonce (Hex): \")\n        print(nonce)\n               \n\n\
      \    \n    def work(self, input_items, output_items):\n        global textboxValue\n\
      \        global key\n        global nonce\n        \n        # get length of\
      \ string\n        _len = len(textboxValue)\n        __len = len(key)\n     \
      \   ___len = len(nonce)\n        if (_len > 0):\n            \n            #\
      \ store elements in output array\n            for x in range(_len):\n      \
      \          output_items[0][x] = ord(textboxValue[x])\n            print(\"---End\
      \ of Encrypt---\")\n            textboxValue = \"\"\n            for y in range(__len):\n\
      \                output_items[1][y] = ord(key[y])\n            for z in range(___len):\n\
      \                output_items[2][z] = ord(nonce[z])\n            self.message_port_pub(pmt.intern('clear_input'),\
      \ pmt.intern(''))\n            return (_len)\n        else:\n            return\
      \ (0)\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('AES-GCM Encryption', 'my_sync_block', [], [('msg_in', 'message',
      1)], [('0', 'byte', 1), ('1', 'byte', 1), ('2', 'byte', 1), ('clear_input',
      'message', 1)], '\n    reads input from a message port\n    outputs encrypted
      data using AES-GCM \n    ', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 168.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nimport pmt\nimport os\nfrom cryptography.hazmat.primitives.ciphers.aead\
      \ import AESGCM\n\nmsg = \"\"\n\nclass my_sync_block(gr.sync_block):\n    \"\
      \"\"\n    reads encrypted data from a message port\n    outputs decrypted message\n\
      \    \"\"\"\n    def __init__(self):\n        gr.sync_block.__init__(self,\n\
      \            name = \"AES-GCM Decryption\",\n            in_sig = [np.byte,\
      \ np.byte, np.byte],\n            out_sig = [np.byte])\n        self.message_port_register_out(pmt.intern('msg_out'))\n\
      \    \n    def work(self, input_items, output_items):\n        #global msg\n\
      \        \n        data = input_items[0]\n        key = input_items[1]\n   \
      \     nonce = input_items[2]\n        \n        print(\"---Raw received data---\"\
      )\n        print(\"Type: \")\n        print(type(data))\n        print(type(key))\n\
      \        print(\"TextboxValue: \")\n        print(data)\n        print(\"Key:\
      \ \")\n        print(key)\n        print(\"Nonce: \")\n        print(nonce)\n\
      \        \n        # AES-GCM        \n        data = data.tostring()\n     \
      \   key = key.tostring()\n        nonce = nonce.tostring()  \n        \n   \
      \     print(\"---Array to string---\")\n        print(\"TextboxValue: \")\n\
      \        print(data)\n        print(\"Key: \")\n        print(key)\n       \
      \ print(\"Nonce: \")\n        print(nonce)\n        \n        data = data.decode('utf-8')\n\
      \        key = key.decode('utf-8')\n        \n        print(\"---Just having\
      \ hex values---\")\n        print(data)\n        \n        data = bytes.fromhex(data)\n\
      \        key = bytes.fromhex(key)\n        \n        print(\"---Byte format\
      \ from Hex format---\")\n        print(\"TextboxValue: \")\n        print(data)\n\
      \        print(\"Key: \")\n        print(key)\n        print(\"Nonce: \")\n\
      \        print(nonce)\n        \n        aesgcm = AESGCM(key)\n        msg =\
      \ aesgcm.decrypt(nonce, data, None)\n        #print(msg)\n        \n       \
      \ _len(msg)\n        \n        #save to folder I guess\n        if _len > 0:\n\
      \            _len += 1\n            msg += \"/n\"\n            for x in range(_len):\n\
      \                output_items[0][x] = ord(msg[x])\n                msg = \"\"\
      \n                return(_len)\n        else:\n            return(0)\n     \
      \   "
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('AES-GCM Decryption', 'my_sync_block', [], [('0', 'byte', 1), ('1',
      'byte', 1), ('2', 'byte', 1)], [('0', 'byte', 1), ('msg_out', 'message', 1)],
      '\n    reads encrypted data from a message port\n    outputs decrypted message\n    ',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 520.0]
    rotation: 0
    state: true
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'False'
    is_static: 'False'
    key: ''
    label: Input
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 328.0]
    rotation: 0
    state: true
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: encrypt_data
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 160.0]
    rotation: 0
    state: true
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: secret_key
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 272.0]
    rotation: 0
    state: true
- name: virtual_sink_2
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: nonce
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 384.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: encrypt_data
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 512.0]
    rotation: 0
    state: true
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: secret_key
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 560.0]
    rotation: 0
    state: true
- name: virtual_source_2
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: nonce
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 608.0]
    rotation: 0
    state: true

connections:
- [blocks_throttle_0, '0', blocks_file_sink_0, '0']
- [blocks_throttle_0, '0', virtual_sink_0, '0']
- [blocks_throttle_0_0, '0', blocks_file_sink_1, '0']
- [blocks_throttle_0_0, '0', virtual_sink_1, '0']
- [blocks_throttle_0_0_0, '0', blocks_file_sink_2, '0']
- [blocks_throttle_0_0_0, '0', virtual_sink_2, '0']
- [epy_block_0, '0', blocks_throttle_0, '0']
- [epy_block_0, '1', blocks_throttle_0_0, '0']
- [epy_block_0, '2', blocks_throttle_0_0_0, '0']
- [epy_block_0, clear_input, qtgui_edit_box_msg_0, val]
- [epy_block_1, '0', blocks_file_sink_0_0, '0']
- [qtgui_edit_box_msg_0, msg, epy_block_0, msg_in]
- [virtual_source_0, '0', epy_block_1, '0']
- [virtual_source_1, '0', epy_block_1, '1']
- [virtual_source_2, '0', epy_block_1, '2']

metadata:
  file_format: 1
